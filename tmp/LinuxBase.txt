/boot：存放的启动Linux 时使用的内核文件，包括连接文件以及镜像文件。
/etc：存放所有的系统需要的配置文件和子目录列表，更改目录下的文件可能会导致系统不能启动。
/lib：存放基本代码库（比如c++库），其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。
/sys： 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中

指令集合：
/bin：存放着最常用的程序和指令
/sbin：只有系统管理员能使用的程序和指令。

外部文件管理：
/dev ：Device(设备)的缩写, 存放的是Linux的外部设备。注意：在Linux中访问设备和访问文件的方式是相同的。
/media：类windows的其他设备，例如U盘、光驱等等，识别后linux会把设备放到这个目录下。
/mnt：临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。

临时文件：
/run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。
/lost+found：一般情况下为空的，系统非法关机后，这里就存放一些文件。
/tmp：这个目录是用来存放一些临时文件的。

账户：
/root：系统管理员的用户主目录。
/home：用户的主目录，以用户的账号命名的。
/usr：用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。
/usr/bin：系统用户使用的应用程序与指令。
/usr/sbin：超级用户使用的比较高级的管理程序和系统守护程序。
/usr/src：内核源代码默认的放置目录。

运行过程中要用：
/var：存放经常修改的数据，比如程序运行的日志文件（/var/log 目录下）。
/proc：管理内存空间！虚拟的目录，是系统内存的映射，我们可以直接访问这个目录来，获取系统信息。这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件来做修改。

扩展用的：
/opt：默认是空的，我们安装额外软件可以放在这个里面。
/srv：存放服务启动后需要提取的数据（不用服务器就是空）

---------------------------------
重定向 >  (ls > 123.txt)
管道 | (ls | grep "设计*")
如何查看某个目录大小：  du ./目录 -h
查看命令所在路径 whick ls

---------------------------------


快捷键
遍历历史记录：向上 ctrl+p,向下 ctrl+n
删除： 前 ctrl+h,后 ctrl+d；前所有 ctrl+u,后所有 ctrl+k
移动：前 ctrl+b,后 ctrl+f；最前 ctrl+a,最后 ctrl+e
安装：sudo apt-get install 软件名（tree）
输出当前路径：pwd
新增目录：mkdir (目录名） 多层次 mkdir aa/bb/cc -p
新建文件：touch (文件名）
删除目录：rmdir (目录名） 只能删除空目录
	rm (目录名）-r  递归删除下级目录   删除后很难恢复
	rm (目录名）-ri 提示是否删除
删除文件：rm (文件名）（-i, 提示 ）
拷贝文件：cp src dst (dst不存在就新建，存在就覆盖）
拷贝目录：cp src dst -r (dst不存在就新建拷贝src内容不包括src目录；存在，包括src目录）
移动/改名：mv src dst (dst不存在就是改名）
查看文件的内容：
	cat  由第一行开始显示文件内容
	tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！
	nl   显示的时候，顺道输出行号！
	more 一页一页的显示文件内容
	less 与 more 类似，但是比 more 更好的是，他可以往前翻页！
	head 只看头几行
	tail 只看尾巴几行
*查看文件内容：
cat filename (适用于较小文件）
more filename（回车下一行，空格下页，q退出）
less filename
head filename(默认前10行） head -5 filename
tail filename(默认尾部10行） tail -5 filename

软链接：ln -s src dstName (src最好用绝对路径）快捷方式，目录也可以
硬链接：ln src dstName(硬链接计数增加）共享空间

pwd -P
ls -al；
mkdir -mp
rmdir -p
cp [-adfilprsu] 来源档(source) 目标档(destination)
rm [-fir] 文件或目录
mv [-fiu] source destination

修改文件或目录权限
chmod u/g/o/a +/- rwx dst
chmod 777 dst     chmod -440 dst
修改文件所有者或所属组
(sudo) chown 新的用户 文件名    --用户，组，在etc/passwd(group)
chown 新的用户 : 新的组  文件名
 
一、文件与目录管理
一般情况下  白色 -- 普通文件；白色 -- 普通文件；绿色 -- 可执行文件；红色 -- 压缩文件；青色 -- 链接文件；黄色 -- 设备文件；灰色 -- 其他文件
ls -l(h)
drwxr-xr-x 1 root root 4.0K May 21  2019 src/
拥有者，所属组，其他
普通文件（-）;目录（d）;符号链接（l）;管道（p）;套接字（s）;字符设备（c）;块（b）
1：硬链接计数
4.0K:大小（如果是目录永远显示4K(4096）,目录本身大小不包括里面内容)

文件查找  （find 路径 参数 搜索内容）
文件名：find 路径 -name "文件名"
文件类型：find 路径 -type 文件类型; 普通文件（f）;目录（d）;符号链接（l）;管道（p）;套接字（s）;字符设备（c）;块（b）
文件大小：find 路径 -size +10k(-5M);  k小写，M大写
	find ./ -size +10k -size -100k (大于10，小于100）
创建日期：find 路径 -ctime -n(+n); n天内创建的/n天前创建的
修改日期：find 路径 -mtime -n(+n); 
访问日期：find 路径 -atime -n(+n); 
深度：（几层路径） -maxdepth n;  - mindepth n
高级查找：列出详细信息
	find ./ -type d -exec ls -l {} \;
	find ./ -type d -ok ls -l {} \;
	find ./ -type d | xargs ls -l

根据文件内容查找文件：(sudo) grep -r(有目录）“查找的内容” 路径(grep -r "hello world" ~)       -n显示所在行数 -i不区分大小写 

压缩：
格式
.gz 由gzip压缩来的
.bz2 由bzip2压缩来的
压缩命令：
tar打包，参数：c 创建压缩文件，x 释放压缩文件，v 打印提示信息，f 指定压缩包的名字， 
	       z 使用gzip压缩文件（xx.tar.gz），j 使用bzip2压缩文件（xx.tar.bz2）
tar 参数 压缩包名字 原材料	tar zcvf test.tar.gz file1 dir2
解压缩 tar zxvf test.tar.gz (-C解压到路径）

rar(需要安装 sudo apt-get install rar)
rar a 压缩包名（不用指定后缀）压缩内容 (内容中有目录时 -r)
解压：rar x 压缩包名 解压目录

zip/unzip(需要安装 sudo apt-get install zip)
zip 压缩包名（不用指定后缀）压缩内容 (内容中有目录时 -r)
解压：unzip 压缩包名 -d 解压目录

--------------------------------
tar只负责打包、解包，不进行压缩
打包：tar -cvf xxx.tar 需要打包的文件
解包：tar -xvf xxx.tar         不指定路径，默认在当前路径解包
指定目录解包：tar -xvf xxx.tar -C 指定路径目录

gzip压缩tar包
压缩：gzip -r xxx.tar  xxx.tar.gz 自动在当前目录生成：xxx.tar.gz
		gzip xxx.tar
解压：gzip -d xxx.tar.gz

压缩打包：tar -czvf xxx.tar.gz 所需文件
解压解包：tar -xzvf xxx.tar.gz

压缩打包：tar -cjvf xxx.tar.bz2 所需文件
解压解包：tar -xjvf xxx.tar.bz2 -C 指定路径
------------------------------------

软件安装与卸载
在线	安装：sudo apt install 软件名
	卸载：sudo apt remove 软件名
	软件列表更新(非软件本身)：sudo apt update
	清空缓存：sudo apt clean (/var/cache/apt/archives)

软件包(.deb)安装：sudo dpkg -i xxx.deb
	卸载：sudo dpkg -r 软件名

源码安装：查看目录中的 readme

man文档 man man
1.shell
2.系统函数
3.库函数
5.格式，规范

vim相关 （帮助文档vimtutor）
配置文件  用户：~/.vimrc
	系统：/etc/vim/.vimrc
显示行号 :set nu   不显示 :set nonu
命令模式：
	保存退出 ZZ（两个大写Z）
	代码格式化  gg=G
	光标移到  H(左) J(下) K(上) L(右)
		移动到行首  0  行尾  $
		文件首部  gg  尾部  G
		跳到n行  n G
		下跳n行  n 回车
	删除
		光标前字符  X  后  x
		单词（当前串光标后的）  dw
		当前行光标前的 d0  光标后的  d$(或者D)
		删除整行  dd   删除多行（光标所在行及以下）ndd
		删除整个文件 gg移到首部dG 或 G移到尾部dgg
	撤销  u  反撤销  ctrl+r
	复制粘贴
		复制1行 yy  多行 nyy
		粘贴到光标下一行p  光标上一行P
	可视模式  v(复制部分）
		移动光标（hjkl）选择复制内容 y
		删除  d
		粘贴到光标后面p  光标前面P
	替换  r替换光标后1个字符  R替换光标后多个字符（esc退出）
	查找  
		/xxx 向下循环查找
		?xxx 向上循环查找 n/N切换下/上一个
		# 查找光标所在单词
	查看man文档  光标所在函数 章节号+K(shift+k)
	命令模式切换编辑模式
		a: 光标后开始编辑  A：当前行最后开始编辑
		i：光标前开始编辑  I：当前行最前开始编辑
		o：光标下创建新行 O：光标上创建新行
		s：删除光标盖住的字 S：删除整行
	命令模式切换编辑模式 :
编辑模式：
	编辑模式切换命令模式 esc	
末行模式：
	末行模式执行shell命令(:!+shell命令)  :!ls  
	末行模式切换命令模式 esc esc
	保存不退出  :w  保存退出  :wq(:x)
	退出  :q   退出不保存  :q!	
	替换  :s/old/new/gc	g替换当前行所以的， c替换前提示
		:x,ys/old/new/g   x行到y行
		:%s/old/new/g    全文替换
	分屏
		当前文件分屏 水平  :sp    垂直  :vsp 
		两个屏幕显示不同文件  水平  :sp 文件名    垂直  :vsp 文件名
		屏幕切换 ctrl+w+w
		退出当前屏幕  :q  关闭所有  :qall
		保存所有  :wall  保存退出所有  :wqall
		**打开的时候分屏  n表示分屏个数可以省略
			水平  vim -o(n) 文件名 文件名
			垂直  vim -O(n) 文件名 文件名

gcc
预处理 ->  编译 ->  汇编  ->  链接
gcc hello.c -I ./include/ -o hell -D DEBUG -Wall -O3
常用参数
	-v/--version  版本号
	-I  编译时指定头文件路径（附加包含目录）	
	-c  将汇编文件(.s)生成二进制文件(.o)
	-o 指定生成的文件名
	-g  gdb调试时用的文件
	-D  在编译的时候指定一个宏（测试程序时）
	-Wall  警告信息
	-On  优化代码，n表示优化级别：1,2,3（最高级别）

制作静态库（.a）
得到 *.o	gcc a.c b.c c.c -c
得到静态库 libmytest.a
	ar rcs libmytest.a a.o b.o c.o 
（就是一个打包.o文件的过程）
		ar 工具不包含在gcc中
		r --> 将文件插入静态库中
		c --> 创建静态库，不管库是否存在
		s --> 写入一个目标文件索引到库中，或者更新一个存在的目标文件索引。
	查看库中的符号（函数、全局变量等）： nm libmytest.a
使用静态库
	gcc + 源文件 + -L 静态库路径 + -l静态库名 + -I头文件目录 + -o 可执行文件名
	gcc main.c -L./ -lmytest -I./ -o app
		-L --> 指定库所在的路径
		-l --> 指定库的名字	去掉前缀 lib，去掉后缀 .a，只留下中间部分
		-I --> 头文件目录位置
*（gcc + 源文件 + -I头文件 + libxxx.a；生成的静态库需要跟对应的头文件同时发布,头文件中存放的是函数接口（函数声明））

制作动态库（.so）
生成“与位置无关”的目标文件
		gcc -fPIC a.c b.c c.c -c
		参数 -fPIC 表示生成与位置无关代码
		执行完毕后生成一系列的 .o 文件
制作动态库
	gcc -shared -o libmytest.so a.o b.o c.o
	参数：-shared 制作动态库
	-o：重命名生成的新文件

	使用动态库
		gcc main.c -L./ -lmytest -I./ -o app
		-L --> 指定库所在的路径,去掉前缀 lib,去掉后缀 .so,只留下中间部分
		-I --> 头文件目录位置
	执行生成的可执行文件
		./app --> 运行失败f
			查看依赖的共享库：ldd app 发现 libmytest 找不到
			没有给动态链接器（ld-linux.so.2）指定好动态库 libmytest.so 的路径
			解决方案
				1. 临时设置：export LD_LIBRARY_PATH=库路径:$LD_LIBRARY_PATH，将当前目录加入环境变量，但是终端退出了就无效了。
				2. 永久设置：用户级别 将上条写入家目录下.bashrc文件中(需要重启/或 source ~/.bashrc重新加载)
					   系统级别 将上条写入 /etc/profile文件中(需要重启/或 source  /etc/profile重新加载)
				
				3. 粗暴设置：直接将libmytest.so文件拷贝到/usr/lib/【/lib】目录下。(受libc库的启发)
				4. 将libmytest.so所在绝对路径追加入到/etc/ld.so.conf文件，使用sudo ldconfig -v 更新
   


二、用户和用户组管理
useradd test    创建test用户
adduser test    创建test用户
userdel test   删除test用户
userdel -r test  删除test用户及其家目录
usermod -l test1 test    将用户test修改为test1
passwd test     修改用户密码
groupadd  test   添加用户组为test
groupdel test  删除用户组test
groupmod -n root test    更改test用户组为root
su test  切换当前用户为test用户 

三、磁盘管理
df命令参数功能：检查文件系统的磁盘空间占用情况。
df [-ahikHTm] [目录或文件名]	df -h

du命令是对文件和目录磁盘使用的空间的查看
du [-ahskm] 文件或目录名称

fdisk 是 Linux 的磁盘分区表操作工具。
fdisk [-l] 装置名称

mkfs [-t 文件系统格式] 装置文件名  磁盘格式化

磁盘挂载使用 mount 命令，卸载使用 umount 命令。
mount [-t 文件系统] [-L Label名] [-o 额外选项] [-n]  装置文件名  挂载点
umount [-fn] 装置文件名或挂载点

四、vi/vim
:q!

#语法格式： >  文件
 作用:  将内容输出到文件，若文件中有内容则覆盖。若文件不存在，则创建文件
 示例:  
      ll > a.txt   查看详细后输出到a.txt 。
      cat a.txt > b.txt  将a.txt中的内容添加到b.txt中 。
	  
#语法格式： >>  文件
  作用:  将内容追加到文件，若文件中有内容则追加。若文件不存在，则创建文件    
 示例:  
      ll >> a.txt   查看详细后追加到a.txt 。
      cat a.txt >> b.txt  将a.txt中的内容添加到b.txt中 。
	  
ps -aux   显示所有进程 
kill 319877  杀掉进程319877
top -d 5  每隔5秒更新一次 
df -h   以比较容易阅读方式查看磁盘使用情况
shutdown -h now      立即关机
shutdown -r now      立即重启	  
shutdown -h 22:30    22:30关机	  
reboot  重启	  
	  
	  
	  
	  
	  