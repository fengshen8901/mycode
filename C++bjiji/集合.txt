数据结构： 数组，字符串，stl，图，树
算法
C++11特性
设计模式

生成过程：从源代码到可执行文件（.exe）三个步骤：
1.预编译：  宏替换，吸收所有的.h文件，根据预编译指令（条件指令）抛弃部分代码
2.编译：对每个CPP文件进行语法性错误检查，并生成为若干个XXXX.obj(中间过程文件）
3.链接：将若干个.obj整合为一个.obj，再次进行错误检查，(嵌入资源清单等其他信息）生成XXXX.exe

TCP,Socket,内存池，packet,包合并，IO线程

宏替换、宏展开（完全替换）

-------------------------------------------------------------
随机
rand()  0~RAND_MAX
需加随机种子，否则每次随机一样
加头头文件#include <time>
srand(unsigned ( time (NULL)));
rand()%(n-m+1)+m;

STL中的函数random_shuffle()用来对一个元素序列进行重新排序（随机的），函数原型如下：
template<class RandomAccessIterator>  
   void random_shuffle(  
      RandomAccessIterator _First, //指向序列首元素的迭代器  
      RandomAccessIterator _Last  //指向序列最后一个元素的下一个位置的迭代器  
   ); 
   
-------------------------------------------------------------
位运算  转为二进制（0为假，1为真）
&	有假即为假
|	有真即为真
^	相同为假，不同为真
~	非，取反
<<	左移，低位补0	  用作乘法，移几位，乘2的n次幂
>>	右移，高位补符号位	用作除法，移几位，除2的n次幂

运算符重载：为某些运算符赋以全新的含义，实现特殊功能

可重载运算符几乎包含了C++的全部运算符集，有几个例外不可重载：
1.限定符‘.’和‘::’
2.条件运算符‘? :’
3.取长度运算符‘sizeof’

运算符重载是一个特殊函数定义过程，总是以  operator <运算符>作为函数名

1.重载为类的函数成员
2.重载为类的友元函数

-------------------------------------------------------------
输入输出(!!format)
printf_s("%3.2f \n", n);
cin >> hex >> n; cout << hex << n;
cin >> oct >> n;
cin >> dec >> n;
读一行
std::string line = "";
while (getline(std::cin, line))
{
	std::cout << line << std::endl;
}
-------------------------------------------------------------
extern（全局作用域） 关键字，用法： 
	1. 声明为外部的变量（extern int a   推迟技术（到其他.cpp找int a））
	2. 以C语言的形式编译｛｝中的代码   
		extern 'C'
		{ 
			代码
		｝

static（文件作用域）	的三条作用总结：
最主要功能是隐藏（多文件时隐藏函数，变量名，可在其它文件中现次使用名，不会重定义），
其次因为staitc变量存放在静态存储区，
所以它具备持久性和默认值为0；

-------------------------------------------------------------
auto （关键字）自动数据类型推导，必须初始化；所有基本数据类型，指针（不能定义数组）
 auto a=10;
 auto p=&a;
decltype 查询变量或表达式的类型
 decltype(a) b=a;定义一个a类型的变量b等于a

序列式的for循环
输出数组:  for( auto element: iArray)
		cout<<element<<endl;

Lambda (匿名函数）
[函数对象参数](操作符重载函数参数）->返回值类型{函数体｝
[=](int a,int b)-> int {return a+b;}


-------------------------------------------------------------
string
  str.size() <=> str.length() 返回 string::size_type 类型(unsigned int)
  string str = "hello " + "world";  //错误，必须有一个是string对象 string("hello ")
  
  





















